{"version":3,"sources":["Form.js","App.js","Finish.js","Select.js","User.js","Notfound.js","serviceWorker.js","index.js"],"names":["Form","event","history","this","props","preventDefault","username","label1","value","toLowerCase","password","label2","window","localStorage","key","setItem","push","concat","_this","_this$props","tagline","react_default","a","createElement","id","onSubmit","goToUserPage","bind","className","name","htmlFor","type","ref","input","required","Component","App","src_Form","React","PureComponent","Modal","_ref","handleClose","show","children","showResult","onClick","Finish","state","localdata","showModal","data","getItem","setState","hideModal","_this$state","Finish_Modal","Select","clicked","carousalCount","store","selected","_this2","onChange","default","hidden","Carousal","data-ride","href","role","data-slide","aria-hidden","User","carousalCountValue","document","getElementById","innerHTML","i","Number","match","params","user","src_Select","src_Finish","Notfound","navigator","Boolean","location","hostname","routes","HashRouter","createBrowserHistory","Switch","Route","exact","path","component","ReactDOM","render","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.b6fbbda4.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nclass Form extends Component {\n  goToUserPage(event) {\n    const { history } = this.props;\n    event.preventDefault();\n    const username = this.label1.value.toLowerCase();\n    const password = this.label2.value;\n    if (username === 'shaadi' && password === '123') {\n      if (window.localStorage.key(username) !== username) {\n        window.localStorage.setItem(username, '');\n      }\n      history.push(`/user/${username}`);\n    }\n  }\n\n  render() {\n    const { tagline, label1, label2 } = this.props;\n\n    return (\n\n      <div id=\"app_root\">\n        <form onSubmit={this.goToUserPage.bind(this)} className=\"row login-form\" name=\"myForm\">\n          <h1>\n            {tagline}\n          </h1>\n          <label htmlFor={label1}>\n            {label1}\n              :\n          </label>\n          <input id={label1} type=\"text\" ref={(input) => { this.label1 = input; }} name={label1} required />\n          <label htmlFor={label2}>\n            {label2}\n              :\n          </label>\n          <input id={label2} type=\"password\" ref={(input) => { this.label2 = input; }} name={label2} required />\n          <button className=\"button-signin\" type=\"submit\" value=\"Sign In\">Sign In</button>\n        </form>\n      </div>\n    );\n  }\n}\n\nForm.propTypes = {\n  history: PropTypes.object.isRequired,\n  tagline: PropTypes.string.isRequired,\n  label1: PropTypes.string.isRequired,\n  label2: PropTypes.string.isRequired,\n};\n\nexport default Form;\n","import React from 'react';\nimport './App.css';\nimport PropTypes from 'prop-types';\nimport Form from './Form';\n\nclass App extends React.PureComponent {\n  render() {\n    const { history } = this.props;\n    return (\n      <Form history={history} tagline=\"Login\" label1=\"username\" label2=\"password\" />\n    );\n  }\n}\n\nApp.propTypes = {\n  history: PropTypes.object.isRequired,\n};\n\nexport default App;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nconst Modal = ({ handleClose, show, children }) => {\n  const showResult = show ? 'modal display-block' : 'modal display-none';\n\n  return (\n    <div className={showResult}>\n      <section className=\"modal-main\">\n        {children}\n        <button type=\"button\" className=\"button-close\" onClick={handleClose}>close</button>\n      </section>\n    </div>\n  );\n};\n\nModal.propTypes = {\n  handleClose: PropTypes.func.isRequired,\n  show: PropTypes.bool.isRequired,\n  children: PropTypes.element.isRequired,\n};\n\nclass Finish extends Component {\n    state = {\n      show: false,\n      localdata: 'you are not logged in',\n    }\n\n    showModal = (event) => {\n      const { data } = this.props;\n      event.preventDefault();\n      if (window.localStorage.key(data) === data) {\n        if (window.localStorage.getItem(data)) {\n          this.setState({ localdata: window.localStorage.getItem(data) });\n        } else {\n          this.setState({ localdata: 'you haven\\'t selected any number' });\n        }\n      }\n      this.setState({ show: true });\n    }\n\n    hideModal = () => {\n      this.setState({ show: false });\n    }\n\n    render() {\n      const { show, localdata } = this.state;\n      return (\n        <div id=\"finishButton\">\n          <Modal show={show} handleClose={this.hideModal}>\n            <p><span>{localdata}</span></p>\n          </Modal>\n          <form onSubmit={this.showModal}>\n            <button className=\"button-signin finish\" type=\"submit\" value=\"Finish\">Finish</button>\n          </form>\n        </div>\n      );\n    }\n}\n\nFinish.propTypes = {\n  data: PropTypes.string.isRequired,\n};\n\nexport default Finish;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nclass Select extends Component {\n    clicked = () => {\n      const { data, carousalCount } = this.props;\n      if (data === window.localStorage.key(data)) {\n        let store = window.localStorage.getItem(data);\n        store = store !== '' ? (`${store},${this.selected.value}`) : this.selected.value;\n        window.localStorage.setItem(data, store);\n        carousalCount(this.selected.value);\n      }\n    }\n\n    render() {\n      return (\n        <div id=\"dropdown-container\">\n          <select ref={(input) => { this.selected = input; }} className=\"custom-select\" onChange={this.clicked.bind(this)}>\n            <option default hidden>select the number of slides in carousal</option>\n            <option value=\"1\">1</option>\n            <option value=\"2\">2</option>\n            <option value=\"3\">3</option>\n            <option value=\"4\">4</option>\n            <option value=\"5\">5</option>\n            <option value=\"6\">6</option>\n            <option value=\"7\">7</option>\n            <option value=\"8\">8</option>\n            <option value=\"9\">9</option>\n            <option value=\"10\">10</option>\n            <option value=\"11\">11</option>\n            <option value=\"12\">12</option>\n            <option value=\"13\">13</option>\n            <option value=\"14\">14</option>\n            <option value=\"15\">15</option>\n            <option value=\"16\">16</option>\n            <option value=\"17\">17</option>\n            <option value=\"18\">18</option>\n            <option value=\"19\">19</option>\n            <option value=\"20\">20</option>\n          </select>\n        </div>\n      );\n    }\n}\n\nSelect.propTypes = {\n  carousalCount: PropTypes.func.isRequired,\n  data: PropTypes.string.isRequired,\n};\n\nexport default Select;\n","import React, { Component } from 'react';\nimport './User.css';\nimport PropTypes from 'prop-types';\nimport Finish from './Finish';\nimport Select from './Select';\n\n\nclass User extends Component {\n    state = {\n      carousalCountValue: '',\n    }\n\n    carousalCount = (data) => {\n      this.setState({ carousalCountValue: data }, () => {\n        document.getElementById('test').innerHTML = '';\n        const { carousalCountValue } = this.state;\n        for (let i = 1; i <= carousalCountValue; i++) {\n          const className = (i === Number(carousalCountValue)) ? 'carousel-item active' : 'carousel-item';\n          document.getElementById('test').innerHTML += `<div class=\"${className}\"><div class=\"img\"><p>${i}</p></div></div>`;\n        }\n      });\n    }\n\n    render() {\n      const { match: { params: { user: username } } } = this.props;\n      return (\n        <div id=\"User_root\">\n          <div id=\"modal\" />\n          <Select carousalCount={this.carousalCount} data={username} />\n          <Carousal />\n          <Finish data={username} />\n        </div>\n      );\n    }\n}\n\nUser.propTypes = {\n  match: PropTypes.object.isRequired,\n};\n\nfunction Carousal() {\n  return (\n    <div className=\"row carousal-container\">\n      <div id=\"carouselExampleControls\" className=\"carousel\" data-ride=\"carousel\">\n        <div id=\"test\" className=\"carousel-inner\">\n          <p className=\"carousal-text\">carousel</p>\n        </div>\n        <a className=\"carousel-control-prev\" href=\"#carouselExampleControls\" role=\"button\" data-slide=\"prev\">\n          <span className=\"carousel-control-prev-icon\" aria-hidden=\"true\" />\n          <span className=\"sr-only\">Previous</span>\n        </a>\n        <a className=\"carousel-control-next\" href=\"#carouselExampleControls\" role=\"button\" data-slide=\"next\">\n          <span className=\"carousel-control-next-icon\" aria-hidden=\"true\" />\n          <span className=\"sr-only\">Next</span>\n        </a>\n      </div>\n    </div>\n  );\n}\n\nexport default User;\n","import React from 'react';\nimport './Notfound.css';\n\nfunction Notfound() {\n  return (\n    <div id=\"Notfound_root\">\n      <div><h1>Notfound</h1></div>\n    </div>\n  );\n}\n\nexport default Notfound;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\n/*  eslint no-console: [\"error\", { allow: [\"log\", \"warn\", \"error\"] }]   */\n\nconst { navigator } = window;\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost'\n    // [::1] is the IPv6 localhost address.\n    || window.location.hostname === '[::1]'\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    || window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/,\n    ),\n);\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all '\n                  + 'tabs for this page are closed. See http://bit.ly/CRA-PWA.',\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404\n        || (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.',\n      );\n    });\n}\n\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service '\n              + 'worker. To learn more, visit http://bit.ly/CRA-PWA',\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\n// function registerValidSW(swUrl, config) {\n//   navigator.serviceWorker\n//     .register(swUrl)\n//     .then((registration) => {\n//       registration.onupdatefound = () => {\n//         const installingWorker = registration.installing;\n//         if (installingWorker == null) {\n//           return;\n//         }\n//         installingWorker.onstatechange = () => {\n//           if (installingWorker.state === 'installed') {\n//             if (navigator.serviceWorker.controller) {\n//               // At this point, the updated precached content has been fetched,\n//               // but the previous service worker will still serve the older\n//               // content until all client tabs are closed.\n//               console.log(\n//                 'New content is available and will be used when all '\n//                   + 'tabs for this page are closed. See http://bit.ly/CRA-PWA.',\n//               );\n\n//               // Execute callback\n//               if (config && config.onUpdate) {\n//                 config.onUpdate(registration);\n//               }\n//             } else {\n//               // At this point, everything has been precached.\n//               // It's the perfect time to display a\n//               // \"Content is cached for offline use.\" message.\n//               console.log('Content is cached for offline use.');\n\n//               // Execute callback\n//               if (config && config.onSuccess) {\n//                 config.onSuccess(registration);\n//               }\n//             }\n//           }\n//         };\n//       };\n//     })\n//     .catch((error) => {\n//       console.error('Error during service worker registration:', error);\n//     });\n// }\n\n// function checkValidServiceWorker(swUrl, config) {\n//   // Check if the service worker can be found. If it can't reload the page.\n//   fetch(swUrl)\n//     .then((response) => {\n//       // Ensure service worker exists, and that we really are getting a JS file.\n//       const contentType = response.headers.get('content-type');\n//       if (\n//         response.status === 404\n//         || (contentType != null && contentType.indexOf('javascript') === -1)\n//       ) {\n//         // No service worker found. Probably a different app. Reload the page.\n//         navigator.serviceWorker.ready.then((registration) => {\n//           registration.unregister().then(() => {\n//             window.location.reload();\n//           });\n//         });\n//       } else {\n//         // Service worker found. Proceed as normal.\n//         registerValidSW(swUrl, config);\n//       }\n//     })\n//     .catch(() => {\n//       console.log(\n//         'No internet connection found. App is running in offline mode.',\n//       );\n//     });\n// }\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then((registration) => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { HashRouter as Router, Route, Switch } from 'react-router-dom';\nimport createBrowserHistory from 'history/createBrowserHistory';\nimport './index.css';\nimport App from './App';\nimport User from './User';\nimport Notfound from './Notfound';\nimport * as serviceWorker from './serviceWorker';\n\nconst routes = (\n  <Router history={createBrowserHistory()}>\n    <Switch>\n      <Route exact path=\"/\" component={App} />\n      <Route exact path=\"/user/:user\" component={User} />\n      <Route exact path=\"*\" component={Notfound} />\n    </Switch>\n  </Router>\n);\n\nReactDOM.render(routes, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}